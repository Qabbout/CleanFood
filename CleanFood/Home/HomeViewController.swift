//
//  HomeViewController.swift
//  CleanFood
//
//  Created by Abdulrahman on 4/11/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit



class HomeViewController: UICollectionViewController, HomeDisplayConfiguration {

    var categoryIndex: String = "1" {
        didSet {
            interactorRequestItemsOfCategory(categoryIndexString: categoryIndex)
        }
    }
    var interactor: HomeInteractorConfiguration?
    var router: (NSObjectProtocol & HomeRoutingConfiguration & HomeDataPassing)?

    var categories: Categories? {
        didSet {
            NotificationCenter.default
                .post(name: NSNotification.Name("categories"),
                      object: categories) }

    }

    var items: Items? {
        didSet {
            NotificationCenter.default
                .post(name: NSNotification.Name("items"),
                      object: items) }
    }

    private let floatingActionButton: UIButton = {
        let button = UIButton()
        button.layer.masksToBounds = false
        button.layer.cornerRadius = 30
        button.backgroundColor = .white
        button.setImage(UIImage(systemName: "cart.fill"), for: .normal)
        button.tintColor = .black
        button.layer.shadowRadius = 5
        button.layer.shadowOpacity = 0.2
        button.layer.shadowOffset = .zero
        button.layer.shadowColor = UIColor.black.cgColor
        button.layer.shouldRasterize = true
        button.layer.rasterizationScale = UIScreen.main.scale
        return button
    }()


    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        floatingActionButton.frame = .init(x: view.frame.width - 60 - 20, y: view.frame.height - 100, width: 60, height: 60)
    }


// MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        addFAB()

        collectionView.contentInsetAdjustmentBehavior = .never

        HomeConfigurator.shared.configure(viewController: self)
        interactorRequestCategories()
        interactorRequestItemsOfCategory()

        NotificationCenter.default.addObserver(self, selector: #selector(interactorGetNewItems(_:)), name: NSNotification.Name("newCategory"), object: nil)

    }

    deinit {
        NotificationCenter.default
            .removeObserver(self,
                            name: NSNotification.Name("newCategory"),
                            object: nil) }

    @objc private func interactorGetNewItems(_ notification: Notification) {
        self.categoryIndex = notification.object as! String


    }

    private func addFAB() {
        view.addSubview(floatingActionButton)
//        floatingActionButton.addTarget(self, action: #selector(printit), for: .touchUpInside)

    }


    func interactorRequestCategories() {
        let request = Home.RequestCategories()
        interactor?.workerGetCategories(request: request)
    }

    func interactorRequestItemsOfCategory(categoryIndexString: String = "1") {
        let request = Home.RequestItemsOfACategory(at: categoryIndexString)
        interactor?.workerGetItemsOfACategory(request: request)
    }

// MARK: - display view model from HomePresenter

    func displayCategories(viewModel: Home.ViewModelCategories) {
        self.categories = viewModel.categories
    }

    func displayItemsOfACategory(viewModel: Home.ViewModelItemsOfACategory) {
        self.items = viewModel.items
    }


}


// MARK: CollectionView Medthods

extension HomeViewController: UICollectionViewDelegateFlowLayout {


    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {

        switch indexPath.section {
        case 0:
            return CGSize(width: view.bounds.width, height: view.bounds.height / 1.5)
        case 1:
            return CGSize(width: view.bounds.width, height: view.bounds.height)
        default:
            return CGSize(width: view.bounds.width, height: view.bounds.height)
        }
    }


    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        1
    }
    override func numberOfSections(in collectionView: UICollectionView) -> Int {
        2
    }

    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

        switch indexPath.section {
        case 0:
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "mainCarousel", for: indexPath) as! CarouselMainCollectionViewCell

            return cell

        case 1:
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "menuCell", for: indexPath) as! MenuCollectionViewCell
            return cell

        default:
            return UICollectionViewCell.init()
        }





    }


}
